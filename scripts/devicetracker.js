// Generated by CoffeeScript 1.4.0
(function() {
  var QA_Device_Tracker;

  QA_Device_Tracker = (function() {

    function QA_Device_Tracker(robot) {
      var _this = this;
      this.robot = robot;
      this.cache = {};
      this.robot.brain.on('loaded', function() {
        if (_this.robot.brain.data.qa_device_tracker) {
          return _this.cache = _this.robot.brain.data.qa_device_tracker;
        }
      });
    }

    QA_Device_Tracker.prototype.add = function(device) {
      var response;
      response = "I'll be keeping track of the " + device + " for you.";
      if (this.cache[device]) {
        response = device + ": Previous status was " + this.cache[device];
      } else {
        this.cache[device] = "With QA";
        this.robot.brain.data.qa_device_tracker = this.cache;
      }
      return response;
    };

    QA_Device_Tracker.prototype.remove = function(device) {
      var response;
      response = "What is this " + device + "that you're talking about...";
      if (this.cache[device]) {
        delete this.cache[device];
        this.robot.brain.data.qa_device_tracker = this.cache;
        response = "Cya, " + device;
      }
      return response;
    };

    QA_Device_Tracker.prototype.lend = function(device, person) {
      var response;
      response = "I don't know about the " + device;
      if (this.cache[device]) {
        this.cache[device] = "Lent to " + person + " (" + this.timestamp + ")";
        this.robot.brain.data.qa_device_tracker = this.cache;
        response = device + " is now with " + person + ". Good luck please don't break it!";
      }
      return response;
    };

    QA_Device_Tracker.prototype.list = function() {
      var devices, key, val, _ref;
      devices = [];
      _ref = this.cache;
      for (key in _ref) {
        val = _ref[key];
        devices.push({
          name: key,
          status: val
        });
      }
      return devices;
    };

    QA_Device_Tracker.prototype["return"] = function(device) {
      var response;
      response = "No device found";
      if (this.cache[device]) {
        this.cache[device] = "With QA";
        response = device + " is now safe at home with QA <3";
        this.robot.brain.data.qa_device_tracker = this.cache;
      }
      return response;
    };

    QA_Device_Tracker.prototype.timestamp = function() {
      var dd, mm, today, yyyy;
      today = new Date();
      dd = today.getDate();
      mm = today.getMonth() + 1;
      yyyy = today.getFullYear();
      if (dd < 10) {
        dd = '0' + dd;
      }
      if (mm < 10) {
        mm = '0' + mm;
      }
      return today = mm + '/' + dd + '/' + yyyy;
    };

    QA_Device_Tracker.prototype.status = function(device) {
      if (this.cache[device]) {
        return this.cache[device];
      } else {
        return "";
      }
    };

    QA_Device_Tracker.prototype.get = function(thing) {
      var k;
      k = this.cache[thing] ? this.cache[thing] : 0;
      return k;
    };

    return QA_Device_Tracker;

  })();

  module.exports = function(robot) {
    var device_admin, tracker;
    tracker = new QA_Device_Tracker(robot);
    device_admin = process.env.DEVICE_ADMIN || "Shell";
    robot.respond(/I have a (.+)/i, function(msg) {
      var device;
      if (msg.message.user.name === device_admin) {
        device = msg.match[1];
        return msg.send(tracker.add(device));
      }
    });
    robot.respond(/(.+) has my (.+)/i, function(msg) {
      var device, person;
      if (msg.message.user.name === device_admin) {
        person = msg.match[1];
        device = msg.match[2];
        msg.send(tracker.add(device));
        return msg.send(tracker.lend(device, person));
      }
    });
    robot.respond(/(.+) returned my (.+)/i, function(msg) {
      var device;
      if (msg.message.user.name === device_admin) {
        device = msg.match[2];
        return msg.send(tracker["return"](device));
      }
    });
    robot.respond(/return my (.+)/i, function(msg) {
      var device;
      if (msg.message.user.name === device_admin) {
        device = msg.match[1];
        return msg.send(tracker["return"](device));
      }
    });
    robot.respond(/(Forget about my (.+))/i, function(msg) {
      var device;
      if (msg.message.user.name === device_admin) {
        device = msg.match[2];
        return msg.send(tracker.remove(device));
      }
    });
    robot.respond(/(list device(s)?|(QA Devices)|(Where(\')?s my shit)|qa shit)/i, function(msg) {
      var device, num, response, _i, _len, _ref;
      response = ["Tracked QA devices:"];
      _ref = tracker.list();
      for (num = _i = 0, _len = _ref.length; _i < _len; num = ++_i) {
        device = _ref[num];
        response.push("" + device.name + " - " + device.status);
      }
      return msg.send(response.join("\n"));
    });
    robot.respond(/(device-status|where is my|wheres my|where is the) (.+)/i, function(msg) {
      var device;
      device = msg.match[2];
      return msg.send(tracker.status(device));
    });
    return robot.hear(/((qa)? device (tracker)? help)/i, function(msg) {
      var response;
      response = ["QA Device Tracker Help"];
      return msg.send(response.join("\n"));
    });
  };

}).call(this);
